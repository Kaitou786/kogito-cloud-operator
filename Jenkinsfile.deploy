@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kogito-operator-slave && !master'
    }

    // Needed for local build
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }

    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')

        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build ? Set if you are not on a multibranch pipeline.')
        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')

        string(name: 'IMAGE_REGISTRY_CREDENTIALS', defaultValue: '', description: 'Image registry credentials to use to deploy images. Will be ignored if no IMAGE_REGISTRY is given')
        string(name: 'IMAGE_REGISTRY', defaultValue: '', description: 'Image registry to use to deploy images')
        string(name: 'IMAGE_NAMESPACE', defaultValue: 'kiegroup', description: 'Image namespace to use to deploy images')
        string(name: 'IMAGE_NAME_SUFFIX', defaultValue: '', description: 'Image name suffix to use to deploy images. In case you need to change the final image name, you can add a suffix to it.')
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'Image tag to use to deploy images')

        // To define if needed. If not, default config will apply
        booleanParam(name: 'KOGITO_IMAGES_IN_OPENSHIFT_REGISTRY', defaultValue: false, description: 'Set to true if kogito images for tests are in internal Openshift registry.In this case, KOGITO_IMAGES_REGISTRY and KOGITO_IMAGES_NAMESPACE parameters will be ignored')
        string(name: 'KOGITO_IMAGES_REGISTRY', defaultValue: '', description: 'Test images registry')
        string(name: 'KOGITO_IMAGES_NAMESPACE', defaultValue: '', description: 'Test images namespace')
        string(name: 'KOGITO_IMAGES_NAME_SUFFIX', defaultValue: '', description: 'Test images name suffix')
        string(name: 'KOGITO_IMAGES_TAG', defaultValue: '', description: 'Test images tag')
        string(name: 'EXAMPLES_REF', defaultValue: '', description: 'Git reference (branch/tag) to the kogito-examples repository to use for tests.')

        string(name: 'MAVEN_ARTIFACT_REPOSITORY', defaultValue: '', description: 'Maven repository where the build artifacts are present')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests')
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        timeout(time: 360, unit: 'MINUTES')
    }

    environment {
        JAVA_HOME = "${GRAALVM_HOME}"

        OPERATOR_IMAGE_NAME="kogito-cloud-operator"
        TEMP_TAG="""pr-${sh(
                returnStdout: true,
                script: 'echo \${GIT_COMMIT} | cut -c1-7'
            ).trim()}"""

        OPENSHIFT_API = credentials("OPENSHIFT_API")
        OPENSHIFT_REGISTRY = credentials("OPENSHIFT_REGISTRY")
        OPENSHIFT_INTERNAL_REGISTRY = "image-registry.openshift-image-registry.svc:5000"
        // OPENSHIFT_CREDS => Credentials to access the Openshift cluster. Use in `loginOpenshift()`

        // Here under is a list of env variable which are defined dynamically into the pipeline
        // We don't define them here because then there would be immutable ...

        // Deploy image information
        // DEPLOY_IMAGE_REGISTRY_CREDENTIALS
        // DEPLOY_IMAGE_USE_OPENSHIFT
        // DEPLOY_IMAGE_REGISTRY
        // DEPLOY_IMAGE_NAMESPACE
        // DEPLOY_IMAGE_NAME_SUFFIX
        // DEPLOY_IMAGE_TAG

        // TEST_PARAMS => parameters which will be set in `configure testing` stage, depending also on pipeline params
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    // Make sure Openshift is available and can authenticate before continuing
                    loginOpenshift()

                    setupImageEnvVarsFromParams("","DEPLOY")

                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    checkout(githubscm.resolveRepository("kogito-cloud-operator", params.GIT_AUTHOR, params.BUILD_BRANCH_NAME, false))
                }
            }
        }
        stage('Build Kogito Operator') {
            steps {
                sh """
                    go get -u golang.org/x/lint/golint
                    make image_builder=podman
                """
            }

        }
        stage('Build Kogito CLI') {
            steps {
                sh """
                    go get -u github.com/gobuffalo/packr/v2/packr2
                    make build-cli
                """
            }
        }
        stage('Push Operator Image to Openshift Registry') {
            steps {
                loginOpenshiftRegistry()
                sh """
                    podman tag quay.io/kiegroup/${OPERATOR_IMAGE_NAME}:${getOperatorVersion()} ${buildTempOpenshiftImageFullName()}
                    podman push --tls-verify=false ${buildTempOpenshiftImageFullName()}
                """
            }
        }
        stage("Configure Testing") {
            when {
                expression {
                    return !params.SKIP_TESTS;
                }
            }
            steps {
                script {
                    env.TEST_PARAMS = ""
                    addTestParamFromValue("operator_image", getTempOpenshiftImageName(true))
                    addTestParamFromValue("operator_tag", env.TEMP_TAG)
                    if (params.MAVEN_ARTIFACT_REPOSITORY != ''){
                        // No mirror if we set directly the Maven repository
                        // Tests will be slower but we need to test against specific artifacts
                        addTestParamFromValue("custom_maven_repo", params.MAVEN_ARTIFACT_REPOSITORY)
                    } else if(env.MAVEN_MIRROR_REPOSITORY != null
                                && env.MAVEN_MIRROR_REPOSITORY != '') {
                        addTestParamFromValue("maven_mirror", env.MAVEN_MIRROR_REPOSITORY)
                    }

                    if (params.KOGITO_IMAGES_IN_OPENSHIFT_REGISTRY) {
                        addTestParamFromValue("build_image_registry", env.OPENSHIFT_INTERNAL_REGISTRY)
                        addTestParamFromValue("services_image_registry", env.OPENSHIFT_INTERNAL_REGISTRY)
                        addTestParamFromValue("build_image_namespace", "openshift")
                        addTestParamFromValue("services_image_namespace", "openshift")
                    } else {
                        if(params.KOGITO_IMAGES_REGISTRY != ''){
                            addTestParamFromValue("build_image_registry", params.KOGITO_IMAGES_REGISTRY)
                            addTestParamFromValue("services_image_registry", params.KOGITO_IMAGES_REGISTRY)
                        }
                        if(params.KOGITO_IMAGES_NAMESPACE != ''){
                            addTestParamFromValue("build_image_namespace", params.KOGITO_IMAGES_NAMESPACE)
                            addTestParamFromValue("services_image_namespace", params.KOGITO_IMAGES_NAMESPACE)
                        }
                    }
                    if(params.KOGITO_IMAGES_TAG != ''){
                        addTestParamFromValue("build_image_version", params.KOGITO_IMAGES_TAG)
                        addTestParamFromValue("services_image_version", params.KOGITO_IMAGES_TAG)
                    }
                    if(params.KOGITO_IMAGES_NAME_SUFFIX != ''){
                        addTestParamFromValue("build_image_name_suffix", params.KOGITO_IMAGES_NAME_SUFFIX)
                        addTestParamFromValue("services_image_name_suffix", params.KOGITO_IMAGES_NAME_SUFFIX)
                    }
                    if(params.EXAMPLES_REF != ''){
                        addTestParamFromValue("examples_ref",params.EXAMPLES_REF)
                    }

                    echo "Test parameters = ${TEST_PARAMS}"
                }
            }
        }
        stage('Run Testing') {
            when {
                expression {
                    return !params.SKIP_TESTS;
                }
            }
            steps {
                sh """
                     make run-smoke-tests load_factor=3 load_default_config=true operator_image=${getTempOpenshiftImageName(true)} operator_tag=${TEMP_TAG} maven_mirror=${MAVEN_MIRROR_REPOSITORY} concurrent=3
                """
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test/logs/**/*.log', allowEmptyArchive: true
                    junit testResults: 'test/logs/**/junit.xml', allowEmptyResults: true
                    sh "cd test && go run scripts/prune_namespaces.go"
                }
            }
        }
        stage('Push to registry') {
            steps {
                script {
                    if (env.DEPLOY_IMAGE_USE_OPENSHIFT == "true") {
                        loginOpenshiftRegistry()
                        tagImage()
                        pushImage()
                    } else if (env.DEPLOY_IMAGE_REGISTRY_CREDENTIALS != ''){
                        withDockerRegistry([ credentialsId: "${DEPLOY_IMAGE_REGISTRY_CREDENTIALS}", url: "https://${DEPLOY_IMAGE_REGISTRY}" ]){
                            tagImage()
                            pushImage()
                        }
                    } else {
                        tagImage()
                        pushImage()
                    }
                }
            }
        }
        // TODO archive CLI as artifact
    }
}

String getOperatorVersion(){
    return sh(script: "cd version/ && TAG_OPERATOR=\$(grep -m 1 'Version =' version.go) && TAG_OPERATOR=\$(echo \${TAG_OPERATOR#*=} | tr -d '\"') && echo \${TAG_OPERATOR}", returnStdout: true).trim()
}

void tagImage(){
    sh "podman tag ${buildTempOpenshiftImageFullName()} ${buildFinalImageFullName()}"
}

void pushImage(){
    sh "podman push --tls-verify=false ${buildFinalImageFullName()}"
}

String buildTempOpenshiftImageFullName(boolean internal=false){
    return "${getTempOpenshiftImageName(internal)}:${TEMP_TAG}"
}
String getTempOpenshiftImageName(boolean internal=false){
    String registry = internal ? env.OPENSHIFT_INTERNAL_REGISTRY : env.OPENSHIFT_REGISTRY
    return "${registry}/openshift/${OPERATOR_IMAGE_NAME}"
}

String buildFinalImageFullName(){
    String finalImageName = env.OPERATOR_IMAGE_NAME
    if(env.DEPLOY_IMAGE_NAME_SUFFIX != null && env.DEPLOY_IMAGE_NAME_SUFFIX != ''){
        finalImageName += "-" + env.DEPLOY_IMAGE_NAME_SUFFIX
    }
    return "${DEPLOY_IMAGE_REGISTRY}/${DEPLOY_IMAGE_NAMESPACE}/${finalImageName}:${DEPLOY_IMAGE_TAG}"
}

void loginOpenshift(){
    withCredentials([usernamePassword(credentialsId: "OPENSHIFT_CREDS", usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]){
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry(){
    loginOpenshift()
    sh "set +x && podman login -u jenkins -p \$(oc whoami -t) --tls-verify=false ${OPENSHIFT_REGISTRY}"
}

void addTestParamFromValue(String key, String value) {
    env.TEST_PARAMS += " ${key}=\"${value}\""
}

/**
    Setup env variables for image registry/namesapce/tag, depending on parameters
*/
void setupImageEnvVarsFromParams(String prefixParam, String prefixEnv) {
    if(getParam(prefixParam, "IMAGE_REGISTRY") == '') {
        setEnv(prefixEnv, "IMAGE_REGISTRY", env.OPENSHIFT_REGISTRY) // Use direct registry as `operator-slave` is running on Openshift
        setEnv(prefixEnv, "IMAGE_NAMESPACE", "openshift")
        setEnv(prefixEnv, "IMAGE_USE_OPENSHIFT", "true")
    } else {
        setEnvFromParam("IMAGE_REGISTRY_CREDENTIALS", prefixEnv, prefixParam)
        setEnvFromParam("IMAGE_REGISTRY", prefixEnv, prefixParam)
        setEnvFromParam("IMAGE_NAMESPACE", prefixEnv, prefixParam)
        setEnv(prefixEnv, "IMAGE_USE_OPENSHIFT", "false")
    }
    if (getParam(prefixParam, "IMAGE_TAG") != '') {
        setEnvFromParam("IMAGE_TAG", prefixEnv, prefixParam)
    } else {
        setEnv(prefixEnv, "IMAGE_TAG", sh(script: "echo ${GIT_COMMIT} | cut -c1-7", returnStdout: true).trim())
    }
    if(getParam(prefixParam, "IMAGE_NAME_SUFFIX") != '') {
        setEnvFromParam("IMAGE_NAME_SUFFIX", prefixEnv, prefixParam)
    }
}

String getKey(String prefix, String envVarName) {
    if (prefix == '') {
        return envVarName
    }
    return "${prefix}_${envVarName}"
}

void setEnv(String keyPrefix, String keyId, String value){
    echo "setEnv ${getKey(keyPrefix, keyId)} = ${value}"
    env."${getKey(keyPrefix, keyId)}" = value
}

void setEnvFromParam(String keyId, String prefixEnv, String prefixParam){
    setEnv(prefixEnv, keyId, getParam(prefixParam, keyId))
}

String getParam(String keyPrefix, String keyId){
    return params."${getKey(keyPrefix, keyId)}"
}